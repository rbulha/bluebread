/*
 *  ======== package/cfg/main_p430.cfg ========
 *  This generated configuration script runs the user's configuration script
 *  the context of a specific target and platform in order to generate
 *  all the files necessary to create an executable; e.g., linker command
 *  files, static C/C++ data structures, etc.
 */

/*
 *  ======== _runescape ========
 *  Recursive unescape to decode serialized strings
 */
function _runescape(obj) {
    for (var i in obj) {
	if (obj[i] != null) {
	    if (typeof obj[i] == 'string') {
		obj[i] = unescape(obj[i]);
	    }
	    else if (typeof obj[i] == 'object') {
		_runescape(obj[i]);
	    }
	}
    }
}

/*
 *  ======== _getPlatCfg ========
 */
function _getPlatCfg() {
    var tmp = {};
    _runescape(tmp);
    return (tmp);
}
/*
 *  ======== _cfginit ========
 */
function _cfginit() {
    xdc.loadPackage('xdc.services.intern.cmd');
    var prog = xdc.om['xdc.cfg.Program'];

    /* initialize prog attrs from build model */
    var build = {
        profile: "release",
        cfgScript: "D%3A/Documents%20and%20Settings/Rogerio/Meus%20documentos/workspace/workspace4.2/Bluebread_2452/main.cfg",
        cfgHome: "xconfig_main",
        cfgArgs: "null",
        cfgArgsEncoded: true,
        releases: {
            0: {
                name: "xconfig_main",
                attrs: {
                    prefix: "",
                    label: "default"
                },
                otherFiles: {},
                excludeDirs: {}
            }
        },
        prelink: false,
        target: {
            $name:"ti.targets.msp430.MSP430",
            name: "MSP430",
            suffix: "430",
            compatibleSuffixes: {
                $name:"ti.targets.msp430.MSP430/compatibleSuffixes",
            },
            isa: "430",
            model: {
                $name:"ti.targets.msp430.MSP430/model",
                endian: "little",
                codeModel: "small",
                dataModel: "small"
            },
            rts: "ti.targets.msp430.rts430",
            platform: "ti.platforms.exp430F5438",
            platforms: {
                $name:"ti.targets.msp430.MSP430/platforms",
                0: "ti.platforms.exp430F5438"
            },
            binaryParser: "ti.targets.omf.cof.Coff",
            version: "ti.targets.msp430.MSP430%7B1%2C0%2C3.3%2C2",
            debugGen: {
                $name:"ti.targets.msp430.MSP430/debugGen",
                execTemplate: "ti/targets/ccs_exec.xdt",
                execPattern: "%24%28cfgDir%29%24%28cfgName%29.pjt",
                packageTemplate: "ti/targets/ccs_package.xdt",
                packagePattern: "package/%24%28pkgName%29.pjt"
            },
            extensions: {
                $name:"ti.targets.msp430.MSP430/extensions",
                ".s430": {
                    $name:"ti.targets.msp430.MSP430/extensions/'.s430'",
                    suf: ".s430",
                    typ: "asm"
                },
                ".asm": {
                    $name:"ti.targets.msp430.MSP430/extensions/'.asm'",
                    suf: ".asm",
                    typ: "asm"
                },
                ".c": {
                    $name:"ti.targets.msp430.MSP430/extensions/'.c'",
                    suf: ".c",
                    typ: "c"
                },
                ".cpp": {
                    $name:"ti.targets.msp430.MSP430/extensions/'.cpp'",
                    suf: ".cpp",
                    typ: "cpp"
                },
                ".cxx": {
                    $name:"ti.targets.msp430.MSP430/extensions/'.cxx'",
                    suf: ".cxx",
                    typ: "cpp"
                },
                ".C": {
                    $name:"ti.targets.msp430.MSP430/extensions/'.C'",
                    suf: ".C",
                    typ: "cpp"
                },
                ".cc": {
                    $name:"ti.targets.msp430.MSP430/extensions/'.cc'",
                    suf: ".cc",
                    typ: "cpp"
                }
            },
            versionMap: {
                $name:"ti.targets.msp430.MSP430/versionMap",
                "TMS320C6x_4.32": "1%2C0%2C4.32%2C0",
                "TMS320C55x_2.56": "1%2C0%2C2.56%2C0",
                "TMS320C54x_3.83": "1%2C0%2C3.83%2C0",
                "TMS320C2000_3.07": "1%2C0%2C3.07%2C0"
            },
            alignDirectiveSupported: true,
            rootDir: "C%3A/PROGRA%7E2/TEXASI%7E1/ccsv4/tools/compiler/msp430",
            profiles: {
                $name:"ti.targets.msp430.MSP430/profiles",
                debug: {
                    $name:"ti.targets.msp430.MSP430/profiles/'debug'",
                    compileOpts: {
                        $name:"ti.targets.msp430.MSP430/profiles/'debug'/compileOpts",
                        copts: "-g",
                        defs: "-D_DEBUG_%3D1"
                    },
                    filters: {
                        $name:"ti.targets.msp430.MSP430/profiles/'debug'/filters",
                    }
                },
                release: {
                    $name:"ti.targets.msp430.MSP430/profiles/'release'",
                    compileOpts: {
                        $name:"ti.targets.msp430.MSP430/profiles/'release'/compileOpts",
                        copts: "-O2%20-g%20--optimize_with_debug"
                    },
                    filters: {
                        $name:"ti.targets.msp430.MSP430/profiles/'release'/filters",
                    }
                },
                profile: {
                    $name:"ti.targets.msp430.MSP430/profiles/'profile'",
                    compileOpts: {
                        $name:"ti.targets.msp430.MSP430/profiles/'profile'/compileOpts",
                        copts: "-gp"
                    },
                    filters: {
                        $name:"ti.targets.msp430.MSP430/profiles/'profile'/filters",
                    }
                },
                coverage: {
                    $name:"ti.targets.msp430.MSP430/profiles/'coverage'",
                    compileOpts: {
                        $name:"ti.targets.msp430.MSP430/profiles/'coverage'/compileOpts",
                        copts: "-gp"
                    },
                    filters: {
                        $name:"ti.targets.msp430.MSP430/profiles/'coverage'/filters",
                    }
                },
                whole_program: {
                    $name:"ti.targets.msp430.MSP430/profiles/'whole_program'",
                    compileOpts: {
                        $name:"ti.targets.msp430.MSP430/profiles/'whole_program'/compileOpts",
                        copts: "-oe%20-O2%20-g%20--optimize_with_debug"
                    },
                    filters: {
                        $name:"ti.targets.msp430.MSP430/profiles/'whole_program'/filters",
                    }
                },
                whole_program_debug: {
                    $name:"ti.targets.msp430.MSP430/profiles/'whole_program_debug'",
                    compileOpts: {
                        $name:"ti.targets.msp430.MSP430/profiles/'whole_program_debug'/compileOpts",
                        copts: "-oe%20--symdebug%3Adwarf"
                    },
                    filters: {
                        $name:"ti.targets.msp430.MSP430/profiles/'whole_program_debug'/filters",
                    }
                }
            },
            sectMap: {
                $name:"ti.targets.msp430.MSP430/sectMap",
                ".text": "code",
                ".cinit": "code",
                ".const": "code",
                ".pinit": "code",
                ".bss": "data",
                ".sysmem": "data",
                ".stack": "stack",
                ".args": "data",
                ".cio": "data",
                ".reset": "data"
            },
            stdInclude: "ti/targets/msp430/std.h",
            stdTypes: {
                $name:"ti.targets.msp430.MSP430/stdTypes",
                t_IArg: {
                    $name:"ti.targets.msp430.MSP430/stdTypes/t_IArg",
                    size: 2,
                    align: 2
                },
                t_Char: {
                    $name:"ti.targets.msp430.MSP430/stdTypes/t_Char",
                    size: 1,
                    align: 1
                },
                t_Double: {
                    $name:"ti.targets.msp430.MSP430/stdTypes/t_Double",
                    size: 4,
                    align: 2
                },
                t_Float: {
                    $name:"ti.targets.msp430.MSP430/stdTypes/t_Float",
                    size: 4,
                    align: 2
                },
                t_Fxn: {
                    $name:"ti.targets.msp430.MSP430/stdTypes/t_Fxn",
                    size: 2,
                    align: 2
                },
                t_Int: {
                    $name:"ti.targets.msp430.MSP430/stdTypes/t_Int",
                    size: 2,
                    align: 2
                },
                t_Int8: {
                    $name:"ti.targets.msp430.MSP430/stdTypes/t_Int8",
                    size: 1,
                    align: 1
                },
                t_Int16: {
                    $name:"ti.targets.msp430.MSP430/stdTypes/t_Int16",
                    size: 2,
                    align: 2
                },
                t_Int32: {
                    $name:"ti.targets.msp430.MSP430/stdTypes/t_Int32",
                    size: 4,
                    align: 2
                },
                t_Int40: {
                    $name:"ti.targets.msp430.MSP430/stdTypes/t_Int40",
                },
                t_Int64: {
                    $name:"ti.targets.msp430.MSP430/stdTypes/t_Int64",
                },
                t_Long: {
                    $name:"ti.targets.msp430.MSP430/stdTypes/t_Long",
                    size: 4,
                    align: 2
                },
                t_LDouble: {
                    $name:"ti.targets.msp430.MSP430/stdTypes/t_LDouble",
                    size: 4,
                    align: 2
                },
                t_LLong: {
                    $name:"ti.targets.msp430.MSP430/stdTypes/t_LLong",
                    size: 4,
                    align: 2
                },
                t_Ptr: {
                    $name:"ti.targets.msp430.MSP430/stdTypes/t_Ptr",
                    size: 2,
                    align: 2
                },
                t_Short: {
                    $name:"ti.targets.msp430.MSP430/stdTypes/t_Short",
                    size: 2,
                    align: 2
                },
                t_Size: {
                    $name:"ti.targets.msp430.MSP430/stdTypes/t_Size",
                    size: 2,
                    align: 2
                }
            },
            bitsPerChar: 8,
            ar: {
                $name:"ti.targets.msp430.MSP430/ar",
                cmd: "ar430",
                opts: "rq"
            },
            arOpts: {
                $name:"ti.targets.msp430.MSP430/arOpts",
                prefix: "",
                suffix: ""
            },
            lnk: {
                $name:"ti.targets.msp430.MSP430/lnk",
                cmd: "lnk430",
                opts: ""
            },
            lnkOpts: {
                $name:"ti.targets.msp430.MSP430/lnkOpts",
                prefix: "-w%20-q%20-u%20_c_int00",
                suffix: "-c%20-m%20%24%28XDCCFGDIR%29/%24@.map%20"
            },
            cc: {
                $name:"ti.targets.msp430.MSP430/cc",
                cmd: "cl430%20-c",
                opts: "%20-vmsp"
            },
            ccOpts: {
                $name:"ti.targets.msp430.MSP430/ccOpts",
                prefix: "-qq%20-pdsw225",
                suffix: ""
            },
            ccConfigOpts: {
                $name:"ti.targets.msp430.MSP430/ccConfigOpts",
                prefix: "%24%28ccOpts.prefix%29",
                suffix: "%24%28ccOpts.suffix%29"
            },
            asm: {
                $name:"ti.targets.msp430.MSP430/asm",
                cmd: "cl430%20-c",
                opts: "%20-vmsp"
            },
            asmOpts: {
                $name:"ti.targets.msp430.MSP430/asmOpts",
                prefix: "-qq",
                suffix: ""
            },
            includeOpts: "-I%24%28rootDir%29/include%20",
            binDir: "%24%28rootDir%29/bin/",
            pathPrefix: "",
            vers: {
                $name:"ti.targets.msp430.MSP430/vers",
                cmd: "cl430",
                opts: "--compiler_revision"
            },
            linkLib: "rts430.lib"
        }
    };
    build.target.findSuffix = function findSuffix(pkg) {
        if (arguments.length < 1) {
            throw new Error("The function ITarget.findSuffix() requires an " + "argument");
        }
        var suffixMap = {};
        if ("build" in pkg) {
            var build = pkg.build;
            if (build.libraries.length != 0) {
                if (build.libDesc[0].suffix != undefined) {
                    for (var i = 0; i < build.libDesc.length; i++) {
                        suffixMap[build.libDesc[i].suffix] = "";
                    }
                } else {
                    for (var i = 0; i < build.libDesc.length; i++) {
                        if (build.libDesc[i].target == prog.build.target.$name) {
                            suffixMap[prog.build.target.suffix] = "";
                            break;
                        }
                    }
                }
            }
        } else {
            if ("length" in pkg) {
                for (var i = 0; i < pkg.length; i++) {
                    suffixMap[pkg[i]] = "";
                }
            } else {
                throw new Error("An invalid argument type supplied to " + "ITarget.findSuffix()");
            }
        }
        var compTargs = [];
        for (var prop in this.compatibleSuffixes) {
            compTargs[prop] = this.compatibleSuffixes[prop];
        }
        if (this.suffix in suffixMap) {
            return (this.suffix);
        }
        if (compTargs.length < 1) {
            return (null);
        }
        for (var i = 0; i < compTargs.length; i++) {
            if (compTargs[i] in suffixMap) {
                return (compTargs[i]);
            }
        }
        return (null);
    };

    build.target.selectSuffix = function selectSuffix(list) {
        var suffixMap = {};
        for (var i = 0; i < list.length; i++) {
            suffixMap[list[i]] = "";
        }
        var compTargs = [];
        for (var prop in this.compatibleSuffixes) {
            compTargs[prop] = this.compatibleSuffixes[prop];
        }
        if (this.suffix in suffixMap) {
            return (this.suffix);
        }
        if (compTargs.length < 1) {
            return (null);
        }
        for (var i = 0; i < compTargs.length; i++) {
            if (compTargs[i] in suffixMap) {
                return (compTargs[i]);
            }
        }
        return (null);
    };

    build.target.asmName = function asmName(cname) {
        return (cname);
    };

    _runescape(build);
    build.cfgArgs = null;
    prog.build = build;
    
    prog.name = "main.x430";
    prog.cfgBase = "package/cfg/main_p430";

    prog.endian = prog.build.target.model.endian;
    prog.codeModel = prog.build.target.model.codeModel;
    prog.dataModel = prog.build.target.model.dataModel;

    /* use the platform package's Platform module */
    var Platform = xdc.useModule("ti.platforms.msp430.Platform");
    var platParams = _getPlatCfg();
    var invalidParams = [];
    for (var prop in platParams) {
        if (!(prop in Platform.PARAMS)) {
            delete platParams[prop];
            invalidParams.push(prop);
        }
    }
    prog.platformName = "ti.platforms.msp430:MSP430G2452";
    prog.platform = Platform.create("MSP430G2452", _getPlatCfg(), platParams);
    for (var i = 0; i < invalidParams.length; i++) {
        Platform.$logWarning("The parameter '" + invalidParams[i] + "' is " +
            "passed to this platform instance through Build.platformTable, " +
            "but the instance does not have a configuration parameter with " +
            "that name.", prog.platform, "MSP430G2452");
    }

    /* record the executable's package name */
    prog.buildPackage = "xconfig_main";

    /* record build-model information required during config generation */
    prog.$$bind("$$isasm", 0);
    prog.$$bind("$$isrom", 0);
    prog.$$bind("$$gentab", [
    ]);
    
    /* bind prog to an appropriate execution context */
    prog.cpu = prog.platform.getExeContext(prog);

    /* import the target's run-time support pkg */
    xdc.loadPackage("ti.targets.msp430.rts430");
}
    
/* function to import the cfg script's package */
function _userscript($$legacy, script) {
    var home;
    var spath;
    home = xdc.loadPackage("xconfig_main");
    
    xdc.om.$$bind('$homepkg', home);

    var platParams = _getPlatCfg();

    /* load & run program cfg script and monitor all loaded files */
    _runCfg("D:/Documents and Settings/Rogerio/Meus documentos/workspace/workspace4.2/Bluebread_2452/main.cfg", spath, "package/cfg/main_p430",  
             undefined, 
             undefined,
             platParams, script);

    /*
     *  ======== _loadOrEval ========
     *  Either load the user configuration script from disk, or else
     *  execute the supplied source text directly. In either case,
     *  provide the same execution environment.
     */
    function _loadOrEval(cfgScript, noTrack, path, script) {
        if (!script) {
            utils.loadCapsule(cfgScript, noTrack, path);
        }
        else {
            /* set up the same environment that loadCapsule would */ 
            var $saveCsd = utils.csd;
            var $cfgFile = utils.findFile(cfgScript, path);
            if ($cfgFile) {
                $cfgFile = java.io.File($cfgFile);
                utils.csd = $cfgFile.getParentFile().getCanonicalPath();
            }
            utils.evaluateScript(script);
            utils.csd = $saveCsd;
        }
    }

    /*
     *  ======== _runCfg ========
     *  Run a user supplied configuration script and prevent user's script from
     *  overwriting the global variable prog.
     */
    function _runCfg(cfgScript, path, programName, legacyTcf, legacyCfg,
        platParams, script)
    {
        if (legacyTcf) {
            /* save current global variables */
            var $save = {prog: utils.global.prog, Program: Program};
    
            /* initialize global variables for legacy config scripts */
            environment["config.programName"] = programName;
            environment["config.platform"] = Program.platformName;
            utils.seedPath = environment["config.importPath"];
            utils.loadPlatform.params = platParams;
            Program = $$legacy.Program;     /* defined in cfg.tci */
            
            /* run legacy config script with prog == to RTSC Program; this
             * allows legacy script to read build atributes from RTSC model
             * before re-creating the prog object
             */
            utils.loadCapsule(cfgScript, false, path);  
    
            /* restore global variables; now prog == TCOM prog because
             * utils.loadPlatform() creates the TCOM prog object.
             */
            $$legacy.prog = utils.global.prog;  /* in case XDC wants it */
            utils.global.prog = $save.prog;
            Program = $save.Program;
    
            /* run XDC configuration script, if it exists */
            if (legacyCfg) {
                utils.importFile(cfgScript.replace(/\.tcf/, ".cfg"), path);
            }
        }
        else {
            _loadOrEval(cfgScript, false, path, script);
        }
    }
}
    
function _postinit() {

    var cout = null;

    var Program = xdc.om['xdc.cfg.Program'];
    /* get the exec command for this executable */
    if (Program.execCmd == null) {
        Program.execCmd = Program.platform.getExecCmd(Program,
            xdc.om["ti.platforms.msp430"].packageBase);
    }
    cout = "define EXEC." + Program.name + '\n\n';
    cout += Program.execCmd;
    cout += "\nendef\n\n";

    utils.genDep("package/cfg/main_p430", "xconfig_main", utils.loadedFiles, cout, null);
}
