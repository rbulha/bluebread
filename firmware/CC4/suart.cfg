/* need to use the CSL module to generate the CSL code */
var CSL = xdc.useModule('ti.mcu.msp430.csl.CSL');
CSL.configApiVersion = "1.00.00";

/* these modules should be part of every project */
var WDTplus = xdc.useModule('ti.mcu.msp430.csl.watchdog.WDTplus');
var GPIO = xdc.useModule('ti.mcu.msp430.csl.gpio.GPIO');
var BCSplus = xdc.useModule('ti.mcu.msp430.csl.clock.BCSplus');
var System = xdc.useModule('ti.mcu.msp430.csl.system.System');

/* use/initialize the Timer_A2 */
var Timer_A2 = xdc.useModule('ti.mcu.msp430.csl.timer.Timer_A2');

/* enable interrupts at the end of CSL_init */
System.srRegs.SR.GIE = System.srDefs.GIE;

/* set stack and heap sizes as appropriate for MSP430 */
Program.sysStack = 0;
Program.stack = 64;
Program.heap = 0;
Program.argSize = 0;

/* setup timer 
 *    input clock to be 125 KHz (= 1MHz/8)
 *    contineous mode to allow simple wrap around handling
 */
Timer_A2.regs.TACTL.TASSEL = Timer_A2.defs.TASSEL_2;
Timer_A2.inputClockToTimer = 1000.0;
Timer_A2.regs.TACTL.ID = Timer_A2.defs.ID_3;
Timer_A2.regs.TACTL.MC = Timer_A2.defs.MC_2;

Timer_A2.ccr0TimerSelection_PowerUser = Timer_A2.CCR0TimerSelection_PowerUser_Selection_1;
Timer_A2.ccr0TimerSelection_BasicView = Timer_A2.CCR0TimerSelection_BasicView_Selection_3;

/* setup timer's capture/compare register 0
 *    initial capture compare of 1200 (= 9.6 ms)
 *    enable interrupts and trigger the ISR named "timer_A_ISR"
 *    set compare unit's mode to output the OUT bit and set OUT to 1
 */
Timer_A2.regs.TACCR0 = 1200;
Timer_A2.regs.TACCTL0.CCIE = Timer_A2.defs.CCIE;
Timer_A2.ccr0InterruptHandler = "timer_A_ISR";
Timer_A2.regs.TACCTL0.OUT = Timer_A2.defs.OUT;

/* Setup GPIO P1.1 and P1.2 for TXD and RXD:
 *    SEL bits select timer A0 as the reader/writer of the pin
 *    DIR bits indicate input/output (1 => output)
 */
GPIO.regs.P1SEL.Bit1 = GPIO.defs.BIT1;
GPIO.regs.P1SEL.Bit2 = GPIO.defs.BIT2_OFF;
GPIO.regs.P1DIR.Bit1 = GPIO.defs.BIT1;
GPIO.regs.P1DIR.Bit0 = GPIO.defs.BIT0;
GPIO.regs.P1DIR.Bit7 = GPIO.defs.BIT7;
GPIO.regs.P1DIR.Bit6 = GPIO.defs.BIT6;
Timer_A2.regs.TACCTL1.CCIE = Timer_A2.defs.CCIE_OFF;
Timer_A2.ccrXTimerSelection_PowerUser[1] = xdc.module("ti.mcu.msp430.csl.timer.ITimer").CCRxTimerSelection_PowerUser_Selection_0;
Timer_A2.ccrXTimerSelection_BasicView[1] = xdc.module("ti.mcu.msp430.csl.timer.ITimer").CCRxTimerSelection_BasicView_Selection_0;
Timer_A2.regs.TACCR1 = 0;
Timer_A2.regs.TACCTL1.CAP = Timer_A2.defs.CAP_OFF;
Timer_A2.regs.TACCTL1.SCS = Timer_A2.defs.SCS_OFF;
Timer_A2.ccInputPin[1] = 0;
Timer_A2.regs.TACCTL1.CM = Timer_A2.defs.CM_0;
Timer_A2.ccr1InterruptHandler = "";
Timer_A2.regs.TACCTL1.OUTMOD = Timer_A2.defs.OUTMOD_0;
GPIO.port1IntHandler = "Timer_A2_CCR1_ISR";
GPIO.regs.P1IES.Bit2 = GPIO.defs.BIT2;
GPIO.regs.P1IE.Bit2 = GPIO.defs.BIT2;
GPIO.port1OperatingModeOnExit = GPIO.KEEP;
Timer_A2.ccr0OperatingModeOnExit = xdc.module("ti.mcu.msp430.csl.timer.ITimer").KEEP;
